{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","stores","dbVersion","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","minhaConnection","target","result","ConnectionFacotry","_createStores","onsuccess","console","log","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,Y;AACTC,kB,GAAS,CAAC,aAAD,C;AACTC,qB,GAAY,C;AACdC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BE,SAA9B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;;AAE7B,oCAAIC,kBAAkBD,EAAEE,MAAF,CAASC,MAA/B;;AAEAC,kDAAkBC,aAAlB,CAAgCJ,eAAhC;AACP,6BALD;;AAQAN,wCAAYW,SAAZ,GAAwB,UAACN,CAAD,EAAO;AAC3BO,wCAAQC,GAAR,CAAY,2BAAZ;;AAEA,oCAAG,CAACpB,UAAJ,EAAe;AACXA,iDAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBoB,IAAjB,CAAsBrB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAK;AACpB,8CAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYe,OAAZ,GAAsB,UAACV,CAAD,EAAO;AACzBO,wCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASS,KAArB;AACAjB,uCAAOM,EAAEE,MAAF,CAASS,KAAT,CAAeC,IAAtB;AAEH,6BAJD;AAKH,yBA/BM,CAAP;AAgCH;;;kDAEoBxB,U,EAAW;;AAE5BF,+BAAO2B,OAAP,CAAe,iBAAQ;;AAEnB,gCAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5C5B,2CAAW6B,iBAAX,CAA6BD,KAA7B;AACH;;AAED5B,uCAAW8B,iBAAX,CAA6BF,KAA7B,EAAmC,EAAEG,eAAgB,IAAlB,EAAnC;AACH,yBAPD;AASH;;;sDAEuB;AACpB,4BAAG/B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const dbName = 'aluraframe';\nconst stores = ['negociacoes'];\nconst dbVersion = 6;\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory{\n\n    constructor(){\n        throw new Error('Essa classe nao pode ser instaciada.');\n    }\n\n    static getConnection(){\n\n        return new Promise((resolve, reject) =>{\n\n            let openRequest = window.indexedDB.open(dbName, dbVersion);\n\n            openRequest.onupgradeneeded = (e) => {\n                \n                    let minhaConnection = e.target.result;\n                    \n                    ConnectionFacotry._createStores(minhaConnection);\n            };\n                \n                \n            openRequest.onsuccess = (e) => {            \n                console.log('conexao obtida co sucesso');   \n                \n                if(!connection){\n                    connection = e.target.result\n                    close = connection.close.bind(connection);\n                    connection.close = () =>{\n                        throw new Error('O metodo close nao pode ser chamado diretamente');\n                    }\n                }\n\n                resolve(connection);\n            };\n            \n            openRequest.onerror = (e) => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n\n            }\n        });\n    }\n        \n    static _createStores(connection){\n            \n        stores.forEach(store =>{\n            \n            if(connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n    \n            connection.createObjectStore(store,{ autoIncrement : true });\n        });\n\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n\n}"]}